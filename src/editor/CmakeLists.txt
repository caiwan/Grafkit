# Grafkit 2 editor - Time machine 
project (Grafkit2)

set(APPLICATION_NAME Idogep)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

cmake_policy(SET CMP0020 NEW)
cmake_policy(SET CMP0071 NEW)

find_package(Qt5Core REQUIRED)
find_package(Qt5Widgets REQUIRED)
find_package(Qt5Gui REQUIRED)

file(GLOB_RECURSE SOURCE_FILES *.cpp *.c *.inl)
file(GLOB_RECURSE HEADER_FILES *.h *.hpp *.inc)
file(GLOB_RECURSE RC_FILES *.rc *.rc?)
file(GLOB_RECURSE UI_FILES *.ui)



# Generate code from ui files
set(CMAKE_AUTOMOC ON) 
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

qt5_wrap_ui(UI_HEADERS ${UI_FILES})

# Generate rules for building source files from the resources
qt5_add_resources(QRCS res/resources.qrc)

add_executable(${APPLICATION_NAME} ${SOURCE_FILES} ${HEADER_FILES} ${UI_HEADERS} ${QRCS})

msvc_set_win32(${APPLICATION_NAME})

# include_directories("${GK2_INCLUDE_DIR}")
# include_directories("${GK2_ROOT_DIR}/src/experimental/demoContext")

target_include_directories(${APPLICATION_NAME} PUBLIC "${GK2_INCLUDE_DIR}")
target_include_directories(${APPLICATION_NAME} PUBLIC "${GK2_ROOT_DIR}/src/experimental/demoContext")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc /GR")
# message("CFLAGS = ${CMAKE_CXX_FLAGS}")

target_link_libraries(${APPLICATION_NAME} 
#    Grafkit2 
	DemoContext
    Qt5::Core 
    Qt5::Gui 
    Qt5::Widgets 
    Qt5::WinMain
	${BASS_LIBRARY_RELEASE}
)
#target_include_directories(${APPLICATION_NAME} PUBLIC "${CMAKE_SOURCE_DIR}")

assign_source_group(${SOURCE_FILES} ${HEADER_FILES} ${RC_FILES} ${QRCS} ${UI_FILES})

bass_copy_binaries(${APPLICATION_NAME} "${CMAKE_CURRENT_BINARY_DIR}")

install(TARGETS ${APPLICATION_NAME} DESTINATION "/")
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/bass.dll" DESTINATION "/")

# TODO: -> lib
